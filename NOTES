setenv DEVROOT `xcode-select --print-path`
setenv SDKROOT $DEVROOT/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk
setenv CPPFLAGS "-I$SDKROOT/usr/include/c++/4.2.1/ -I$SDKROOT/usr/include/ -miphoneos-version-min=8.1 -arch armv7"
setenv CFLAGS "$CPPFLAGS -arch armv7 -pipe -no-cpp-precomp -isysroot $SDKROOT"
setenv CXXFLAGS "$CFLAGS"
setenv LDFLAGS "-L$SDKROOT/usr/lib/"


./configure --disable-shared --enable-static --disable-bin CXX=`xcrun -sdk iphoneos -find g++` CC=`xcrun -sdk iphoneos -find gcc` LD=`xcrun -sdk iphoneos -find ld` --host=arm-apple-darwin


APP
x- add kaldi and openfst libraries under Build Phases
x- add -I for include files (added kaldi/ in search path)
x- add HAVE_CLAPACK=1 under preprocessing macros
x- add Accelarate framework
x- add kalid and fst include files
x- libstdc++ instead of Apple under Language C++
x- need to have .mm extension (Objective C++) for any files that deal with C++
x- include Accelerate framework
2b- add HAVE_POSIX_MEMALIGNED under preprocessing macros
- comment out include for parse-options.h in common-utils.h
x- remove utils/parse-options.h (should not be needed on ios) TODO exclude when building the project
x- add external file dependecies into the project (models, graph, config, etc.); review these files because: a) they include apsolute paths, which need to be removed, b) they reference other files, which also should be included in the project
- util/kaldi-options.cc and util/parse-options.cc needs to use iOS specific io stuff
  - included in iOS project, changed extension cc->mm,
- openfst/lib/symboltable.cc (SymbolTable::ReadText)
  - added new ReadText method in .h file, that accepts input stream; augmented code in the RunTest to open input stream and use the new method
  
- test program

TODO
- compare with opencv
- figure out a way to skip specific checks
- platform specific settings (autoconf for ios target??)
- run configure for mac, and then pass relevant params to the make command instead

OLD
===
setenv CPPFLAGS "-I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk/usr/include/c++/4.2.1/ -I/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/c++/4.2.1/"


./ios-configure iphone --disable-shared --enable-static --disable-bin CXX=/Applications/Xcode.app/Contents/Developer/usr/bin/g++  CPP=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cpp CPPFLAGS="-arch armv7 -I/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/c++/4.2.1/" CC=/Applications/Xcode.app/Contents/Developer/usr/bin/gcc CFLAGS="-I/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include/c++/4.2.1/"
    


RERUN
=====
A simple proof of concept demo of running Kaldi ASR decoder on iOS. It's based on Kaldi online2-wav-nnet2-latgen-faster binary and in its current form it runs ASR on a (hard-coded) wav file, which is part of the app. All the ASR dependencies (models, dictionaries, grammars, etc.) are also part of the application. All of the Kaldi related functionality is contained in KaldiTest class.

The proof of concept demo doesn't work with the live audio, nor it provides an Objective C wrapper/interface for Kaldi. Exception and error handling is not handled at all, so if you are missing some resources, the app will quit with an exception (check the console for Kaldi error output).

A simple example grammar that listens for a day of week is used in the app. It runs in reasonable (close to real) time on an iPhone 5.

ASR Resources group contains all the necessary resources (config files, models, etc.). Paths in the config files were edited so they reference filenames directly.

WAVs group contains a few wav files (16bps, 8kHz) which you can use to run the recognition. A variable named 'filename' in KaldiTest.mm contains path to the wav file.

Build Settings:
- check Search Paths for all the additional paths that need to be set
- Language - C++, dialect is set to GNU++11, and C++ Standard Library to libstdc++
- Preprocessor Macros: HAVE_POSIX_MEMALIGN=1 HAVE_CLAPACK=1

kaldi-util group contains two kaldi source file that were modified to address IO on the iOS platform. These files will take presedence over the same .o files in the kaldi static library.

The project already includes openfst.a static library; Kaldi static library is too large for github, so you will need to compile it and add it to the project by following the directions below. Both libraries are currently built only for the device, so the simulator won't run properly. Steps for building these two libraries:

Download Kaldi source code in kaldi/ directory and this project in kaldi-ios-pos/ directory.

Kaldi
=====
1) Build Kaldi dependencies for Mac OS first
- cd kaldi-trunk/tools/
make

2) Build kaldi-ios static library
- cd kaldi-trunk/src
- cp kaldi-ios-poc/extras/build-kaldi-ios.sh .
- ./configure
- ./build-kaldi-ios.sh iphone   TODO - cleanup this script

You can also direct compiler to optimize the code (CXXFLAGS = "-O3 -DNDEBUG")


FST for iOS
===========
cd kaldi-trunk/tools/
cp kaldi-ios-pos/extras/build-openfst-ios.sh .
./build-openfst-ios.sh

